#!/usr/local/bin/php
<?php
$exe = array_shift($argv);
$now = date("Ymdhi");

$posts = json_decode(file_get_contents("posts.json"));
$nav = json_decode(file_get_contents("../nav/blog.json"));

$exe = `cp posts.json backup/posts.$now.json`;
$tpl = file_get_contents("blank.html");

$force = 0;
$conf = new stdClass();

while ($file = array_shift($argv)) {
    if (preg_match("/^\-\-([\w\-]+)=(.*)/", $file, $match)) {
        $conf->{$match[1]} = $match[2];
    } else if (preg_match("/^\-\-([\w\-]+)/", $file, $match)) {
        $conf->{$match[1]} = 1;
        $conf->{$match[1][0]} = 1;
        continue;
    } else if (preg_match("/^-(\w)/", $file, $match)) {
        $conf->{$match[1]} = 1;
    } else if (file_exists($file)) {
        $fparts = preg_split("/\./", $file);
        $basename = basename($file, ".md");

        logit("Reading markdown from $file...");
        $txt = file_get_contents($file);
        logit("Done.\n");

        $para = preg_split("/\n\n/", $txt);     // need for blurb
        $lines = preg_split("/\n/", $txt);      

        logit("Read ".count($lines)." lines in ".strlen($txt)." bytes.\n");
        logit("Extracting title...");
        $title = preg_replace("/^#\s*/", "", array_shift($lines));
        $parts = preg_split("/\:\s*/", $title, 2);

        
        logit("Done.\nBlog title: \"{$parts[0]}\"\nBlog subtitle: \"{$parts[1]}\"\n\n");

        /*
         * Handled in client now; Seems more appropriate as we don't care if comments are crawled
         * Left here for posterity and out of fear I forgot something
         *  
         * print "Grabbing comments...";
         * if (file_exists("comments/$basename.json")) {
         *    $comments = readComments("comments/$basename.json");
         * }
         **/
        if (!isset($conf->date)) {
           $conf->date = date("Y-m-d");
        } 
        logit("Done. \n\nCreating new blog object...");
        $out = new stdClass();
        $out->fulltitle = $title;
        $out->title = isset($conf->title) ? $conf->title : $parts[0];
        $out->subtitle = isset($conf->subtitle) ? $conf->subtitle : $parts[1];
        $out->link = "/crblog/blog/".$basename.".html";
        $out->name = strtolower(preg_replace("/\W/", '', $out->title));
        $out->date = isset($conf->date) ? $conf->date : date("Y-m-d");
        $out->tags = isset($conf->tags) ? $conf->tags : "";
        $out->target = "iframe";
        $out->hero = "/crblog/assets/img/".$basename.".jpg";
        $out->icon = "fas fa-code";
        $out->blurb = preg_replace("/\"/", "\\\"", $para[1]);
        $out->date_published = date("c", strtotime($conf->date));
        $out->date_modified = date("c");
        $out->image = $basename;
        // $out->comments = $comments;

        logit("Done.\n\n");
        $done = (property_exists($conf, "notty")) ? 1 : 0;

        if (isset($conf->notty)) {
            print "Blog object for '$basename':\n";
            $i = 0;
            foreach ($out as $key=>$val) {
                $keys[] = $key;
                $vals[] = $val;
                ++$i;
                if (strlen($val)> 50) {
                    $val = substr($val, 0, 50)."...";
                }
                print "\t{$i}) $key:\t$val\n";
            }
        } 

        while (!$done) {
            $keys = array();
            $vals = array();
            logit("Blog object:\n");
            $i = 0;
            foreach ($out as $key=>$val) {
                $keys[] = $key;
                $vals[] = $val;
                ++$i;
                if (strlen($val)> 50) {
                    $val = substr($val, 0, 50)."...";
                }
                logit("\t{$i}) $key:\t$val\n");
            }
            logit("\nPlease review new blog entry for correctness.\nType a number or property to change its value.\nPress Enter when satified.\n");

            logit("Enter or 'ok' to continue / # to edit: ");
            $input = getInput();

            if (preg_match("/\d/", $input)) {
                logit("\n\nEditing value for {$keys[(int)$input-1]}\nOld value: {$vals[(int)$input-1]}\nNew value (enter nothing to cancel)? ");
                $newval = getInput();
                if ($newval) {
                    $out->{$keys[(int)$input-1]} = $newval;
                }
            } else if (($input == "")  || ($input=="ok"))  {
                $done = 1;
                continue;
            } else {
                logit("Oops.  Input[{$input}]\n");
            }

        }
        logit("\nWriting cleaned up markdown to tmp.md...");
        file_put_contents("tmp.md", join("\n", $lines));
        logit("Done.\nConverting markdown to html...");
        $out->blogpost = `pandoc --no-highlight -f markdown -t html5 tmp.md`;
        logit("Done.\nRemoving tmp.md file...");
        //$exe = `rm tmp.md`;
        logit("Done.\n\n");

        // find existing nav item (if any) 
        // for next and prev links
        $found = 0;
        for ($i=0; $i<count($posts); $i++) {
            if ($out->link === $posts[$i]->link) {
                $found = $i;
            }
        }
        $nextPost = ($found > 0) ? $posts[$found - 1] : $posts[0];
        $prevPost = ($found < count($posts) - 1) ? $posts[$found + 1] : $posts[0];
        logit("Generating Site HTML...");
        $navlink = new stdClass();
        $navlink->prev_link = $prevPost->link;
        $navlink->prev_title = $prevPost->title;
        $navlink->prev_name = $prevPost->name;
        $navlink->prev_subtitle = $prevPost->subtitle;
        $navlink->prev_fulltitle = $prevPost->fulltitle;
        
        $navlink->next_link = $nextPost->link;
        $navlink->next_title = $nextPost->title;
        $navlink->next_name = $nextPost->name;
        $navlink->next_subtitle = $nextPost->subtitle;
        $navlink->next_fulltitle = $nextPost->fulltitle;

        $html = preg_replace_callback("/%%([^%]*)%%/", function($match) {
            global $out;
            if (isset($out->{$match[1]})) {
                return $out->{$match[1]};
            } else if (isset($navlink->{$match[1]})) {
                return $navlink->{$match[1]};
            } else {
                return "";
            }
        }, $tpl);
        logit("Done.\nGenerated ".strlen($html)." bytes of HTML.\n");
        logit("\nSaving generated html as {$basename}.html...");
        file_put_contents($basename.".html", $html);
        logit("Done.\n");
            
        unset($out->blogpost);

        if (property_exists($conf, "nav")) {
            $exists = 0;
            foreach ($posts as $post) {
                if ($post->fulltitle == $title) {
                    $exists = 1;
                }
            }

            if (!property_exists($conf, "force") && $exists) {
                logit("*** Error: Blog entry named \"$title\" already exists. Aborting...\n");
                exit;
            }
            array_unshift($posts, $out);
            logit("Added post to top of main blog list.\n");
            logit("Saving new blog list...");
            file_put_contents("posts.json", json_encode($posts, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));
            logit("Wrote ".strlen($html)." bytes to {$basename}.html\n");
            logit("\nUpdating main site nav/blog.json...");
            
            $out2 = new stdClass();
            $out2->title = $out->title;
            $out2->subtitle = $out->subtitle;
            $out2->fulltitle = $out->fulltitle;
            $out2->link = $out->link;
            $out2->name = strtolower(preg_replace("/\W/", '', $out->title));
            $out2->target = "iframe";
            $out2->icon = "fas fa-code";
            
            logit("Adding new blog post to top of blog.json...");
            array_unshift($nav, $out2);
            logit("Done.\nBacking up current blog.json...");
            $exe = `cp ../nav/blog.json backup/blog.$now.json`;
            logit("Done.\nblog.json saved to backup/blog.$now.json.\nWriting updated blog.json...");
            file_put_contents("../nav/blog.json", json_encode($nav, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));
            logit("Done.\n\n");

            logit("Blog entry added. You should review the following files:\n\tposts.json\n\t../nav/blog.json\n\t$basename.html\n\t../assets/img/$basename.jpg\n\nBe sure to create or change the image $basename.jpg\n");
        }
    
    }
}

function readComments($file) {
    $comments = json_decode(file_get_contents($file));
    $out = "";
    if (count($comments)) {
        $out = "<ul class='comments-list'>";

        foreach ($comments as $comment) {
            $out .= makeComment($comment);
        }

        $out .= "</ul>";

    }
    return $out;
}

function makeComment($comment, $lvl = 0) {
    if (property_exists($comment, "date")) {
        $comment->date = date("M j", strtotime($comment->date));
    }
    $out = <<<EOT
<li class='comment-item' data-key='{$comment->_id}' data-parentid='{$comment->_parent}'>
    <div class='comment-head'>
        <div class='commenter'>{$comment->name}</div><div class='comment-date'>{$comment->date}</div>
    </div>
    <p class='comment'>{$comment->comment}</p>
EOT;
    if ($lvl < 3) {
        $out .= <<< EOT
<div class='reply-wrap'><span class='comment-tools'></span> <a class='reply-link' href='#' onclick='app.reply(this, event, "{$comment->_id}");return false'>Reply â†’</a></div>
EOT;

    }

    if (property_exists($comment, "replies")) {
        $out .= "\n<ul class='comment-reply'>";
        foreach ($comment->replies as $reply) {
            $out .= makeComment($reply, $lvl + 1);
        }
        $out .= "</ul>";
    }
    $out .= "</li>";
    return $out;
}
function getInput() {
    $handle = fopen ("php://stdin","r");
    $line = fgets($handle);
    $line = trim($line);
    fclose($handle);
    return $line;
}
function logit($txt) {
    global $conf;
   
    if (!isset($conf->q) && (!isset($conf->quiet))) {
        print $txt;
    }
}
?>
